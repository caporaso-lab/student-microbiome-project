otu <- read.delim(file=Rareified_OTU_table_10000.txt)
otu <- read.delim(file=Rareified_OTU_table_10000)
pielou.f (otu_fp="Rareified_OTU_table_10000.txt")
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
plot_taxa_through_time.f = function(taxasum_fp,map_fp,time_col){  taxasum=read.table(taxasum_fp, header=TRUE, row.names=1, sep="\t",check.names=FALSE)  map=read.table(map_fp, header=TRUE, check.names=FALSE, sep="\t")  pdf("taxa_trough_time.pdf",width=10,onefile=TRUE)  # 6 colors  #colors=c("blue","red","green","orange","purple","brown")  # 11 colors  colors=c("blue","red","green","orange","purple","brown","pink","turquoise","bisque","yellow","whitesmoke")  u = unique(map[,"SiteID"])  for(i in 1:length(u)){    g = grep(u[i],map[,"SiteID"])    ts_col = match(map[,"SampleID"][g],colnames(taxasum))    taxasum.sub = taxasum[,ts_col]    # get top 5 or 10 taxa by taking means of each taxa across time points and ranking    tMeans = rowMeans(taxasum.sub)    tMeans.ranks = rank(-tMeans)    # make new df with top 5/10 taxa plus "other" group    plotData = taxasum.sub[tMeans.ranks<=10,]    taxaNames = regmatches(row.names(plotData),regexpr("f__(.*$)",row.names(plotData),perl=TRUE,useBytes=FALSE))    taxaNames[taxaNames=="f__"] = regmatches(row.names(plotData)[taxaNames=="f__"],regexpr("o__(.*$)",row.names(plotData)[taxaNames=="f__"],perl=TRUE,useBytes=FALSE))    row.names(plotData) = taxaNames    plotData = rbind(plotData,colSums(taxasum.sub[tMeans.ranks>10,]))    row.names(plotData)[length(row.names(plotData))] = "Other"    # sort taxa by abundances    plotData = plotData[order(-rowMeans(plotData)),]    # get time points and sort by them    timePoints = map[g,time_col]    plotData = plotData[,order(timePoints)]    timePoints = timePoints[order(timePoints)]    # add column with means    plotData = cbind(plotData,rowMeans(plotData))    timePoints = c(timePoints,"mean")    # plot    par(mar=c(5, 4, 4, 14), xpd=TRUE)    barplot(as.matrix(plotData),main=u[i],xlab="Weeks since start",ylab="Relative abundance",names.arg=timePoints,            col=colors)    legend(grconvertX(0.70,"nic","user"),grconvertY(0.80,"nic","user"),legend=row.names(plotData),fill=colors)         }  dev.off()}
library(Rcmdr)
library(rcmdr)
install.packages("rcmdr")
install.packages("Rcmdr")
setwd("~/Documents/Student_Study/Data/All_Weeks/OTU_picking_December_2012/beta-diversity")
map=read.table("DiversitySummaryCombinedAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
library("ggplot2")
c=ggplot(map, aes(x=MEAN_Unweighted, y=MEAN_Weighted, color=BodySite))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Weighted ~ MEAN_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm", x= "Average Unweighted UniFrac Distance", y= "Average Weighted UniFrac Distance")
c
map=read.table("Forehead_vs_Palm.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=BodySite))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
model=lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
summary(model)
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender, xmin=0, xmax=1, ymin=0, ymax=1))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender, xmin=.4, xmax=.8, ymin=.3, ymax=.8))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender, cex=1.5))
c=c + geom_point(size=3)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=5)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
model=lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
summary(model)
model
print(summary(model)
)
x=summary(model)
fix(x)
fix(x)
write.table(x,"Test.txt", quote=FALSE, sep="\t")
write.csv(x,"Test.txt", quote=FALSE, sep="\t")
write.csv(x,"Test.txt", quote=FALSE, append=TRUE, sep="\t")
write.table(x,"Test.txt", quote=FALSE, append=TRUE, sep="\t")
write(x,"Test.txt", quote=FALSE, append=TRUE, sep="\t")
fix(x)
model=lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
summary(model)
write(x,"Test.txt", append=TRUE, sep="\t")
write((summary(model)),
x
y <- as.character(x)
y
y <- as.data.frame(x)
y <- as.vector(x)
y
write(y, "test.txt", append=T, sep="\t")
print(y, "test.txt", append=TRUE, sep="\t")
capture.output(x,"test.txt")
fix(x)
x=summary(model)
capture.output(x, file="test.txt")
capture.output(x, file="test.txt")
y=summary.lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
summary.lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
model=lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Palm.txt")
model=lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Palm_model_results.txt")
map=read.table("Forehead_vs_Palm.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Palm")
c
c=ggplot(map, aes(x=MEAN_Forehead_Weighted, y=MEAN_Palm_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Weighted ~ MEAN_Forehead_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Weighted UniFrac Distance - Forehead", y= "Average Weighted UniFrac Distance - Palm")
c
model=lm(MEAN_Palm_Weighted ~ MEAN_Forehead_Weighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Palm_WUniFrac_model_results.txt")
map=read.table("Forehead_vs_Gut.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Forehead_Weighted, y=MEAN_Gut_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Gut_Weighted ~ MEAN_Forehead_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Palm", x= "Average Weighted UniFrac Distance - Forehead", y= "Average Weighted UniFrac Distance - Gut")
c
c=ggplot(map, aes(x=MEAN_Forehead_Weighted, y=MEAN_Gut_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Gut_Weighted ~ MEAN_Forehead_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Gut", x= "Average Weighted UniFrac Distance - Forehead", y= "Average Weighted UniFrac Distance - Gut")
c
model=lm(MEAN_Gut_Weighted ~ MEAN_Forehead_Weighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Gut_WUniFrac_model_results.txt")
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Gut_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Gut_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Gut", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Gut")
c
model=lm(MEAN_Gut_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Gut_UUniFrac_model_results.txt")
map=read.table("Forehead_vs_Tongue.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Forehead_Unweighted, y=MEAN_Tongue_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Unweighted ~ MEAN_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Tongue", x= "Average Unweighted UniFrac Distance - Forehead", y= "Average Unweighted UniFrac Distance - Tongue")
c
model=lm(MEAN_Tongue_Unweighted ~ MEAN_Forehead_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Tongue_UUniFrac_model_results.txt")
c=ggplot(map, aes(x=MEAN_Forehead_Weighted, y=MEAN_Tongue_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Weighted ~ MEAN_Forehead_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Forehead vs. Tongue", x= "Average Weighted UniFrac Distance - Forehead", y= "Average Weighted UniFrac Distance - Tongue")
c
model=lm(MEAN_Tongue_Weighted ~ MEAN_Forehead_Weighted, data=map)
x=summary(model)
capture.output(x, file="Forehead_vs_Tongue_WUniFrac_model_results.txt")
map=read.table("Gut_vs_Palm.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Gut_Weighted, y=MEAN_Palm_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Weighted ~ MEAN_Gut_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Gut vs. Palm", x= "Average Weighted UniFrac Distance - Gut", y= "Average Weighted UniFrac Distance - Palm")
c
model=lm(MEAN_Palm_Weighted ~ MEAN_Gut_Weighted, data=map)
x=summary(model)
capture.output(x, file="Gut_vs_Palm_WUniFrac_model_results.txt")
c=ggplot(map, aes(x=MEAN_Gut_Unweighted, y=MEAN_Palm_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Palm_Unweighted ~ MEAN_Gut_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Gut vs. Palm", x= "Average Unweighted UniFrac Distance - Gut", y= "Average Unweighted UniFrac Distance - Palm")
c
model=lm(MEAN_Palm_Unweighted ~ MEAN_Gut_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Gut_vs_Palm_UUniFrac_model_results.txt")
map=read.table("Gut_vs_Tongue.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Gut_Unweighted, y=MEAN_Tongue_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Unweighted ~ MEAN_Gut_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Gut vs. Tongue", x= "Average Unweighted UniFrac Distance - Gut", y= "Average Unweighted UniFrac Distance - Tongue")
c
model=lm(MEAN_Tongue_Unweighted ~ MEAN_Gut_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Gut_vs_Tongue_UUniFrac_model_results.txt")
c=ggplot(map, aes(x=MEAN_Gut_Weighted, y=MEAN_Tongue_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Weighted ~ MEAN_Gut_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Gut vs. Tongue", x= "Average Weighted UniFrac Distance - Gut", y= "Average Weighted UniFrac Distance - Tongue")
c
rstudio::viewData(map)
model=lm(MEAN_Tongue_Weighted ~ MEAN_Gut_Weighted, data=map)
x=summary(model)
capture.output(x, file="Gut_vs_Tongue_WUniFrac_model_results.txt")
map=read.table("Tongue_vs_Palm.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MEAN_Palm_Weighted, y=MEAN_Tongue_Weighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Weighted ~ MEAN_Palm_Weighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm vs. Tongue", x= "Average Weighted UniFrac Distance - Palm", y= "Average Weighted UniFrac Distance - Tongue")
c
model=lm(MEAN_Tongue_Weighted ~ MEAN_Palm_Weighted, data=map)
x=summary(model)
capture.output(x, file="Palm_vs_Tongue_WUniFrac_model_results.txt")
c=ggplot(map, aes(x=MEAN_Palm_Unweighted, y=MEAN_Tongue_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MEAN_Tongue_Unweighted ~ MEAN_Palm_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm vs. Tongue", x= "Average Unweighted UniFrac Distance - Palm", y= "Average Unweighted UniFrac Distance - Tongue")
c
model=lm(MEAN_Tongue_Unweighted ~ MEAN_Palm_Unweighted, data=map)
x=summary(model)
capture.output(x, file="Palm_vs_Tongue_UUniFrac_model_results.txt")
map=read.table("Forehead_vs_Palm.txt", header=TRUE, sep="\t", check.names=FALSE)
c=ggplot(map, aes(x=MAD_Forehead_Unweighted, y=MAD_Palm_Unweighted, color=Gender))
c=c + geom_point(size=4)
c=c + theme_bw(base_size=20)
line=coef(lm(MAD_Palm_Unweighted ~ MAD_Forehead_Unweighted, data=map))
c=c + geom_abline(intercept=(line[1]), slope=(line[2]))
c=c + labs(title = "Palm vs. Tongue", x= "MAD Unweighted UniFrac Distance - Palm", y= "MAD Unweighted UniFrac Distance - Tongue")
c
map=read.table("DiversitySummaryGutAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
stat_sum_single <- function(fun, geom="crossbar", ...) {
stat_summary(fun.y=fun, colour="black", geom=geom, width = 0.4, ymin=-1000,ymax=-1000, ...)
}
d=ggplot(map, aes(x= Gender, y=MAD_Gut_Unweighted, color=Gender, ymax=0.4, ymin=0, title = "Gut- Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Median Absolute Deviation (MAD)")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
AOVModel=aov(MAD_Gut_Unweighted ~ Gender, data=map)
AOVModel
summary(AOVModel)
comparions(TukeyHSD(AOVModel))
comparions=(TukeyHSD(AOVModel))
comparisons
comparisons=(TukeyHSD(AOVModel))
comparisons
plot(comparisons, las=1)
d=ggplot(map, aes(x= Universtiy, y=MEAN_Gut_Unweighted, color=University, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
d=ggplot(map, aes(x= University, y=MEAN_Gut_Unweighted, color=University, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=map)
summary(AOVModel)
comparisons=(TukeyHSD(AOVModel))
comparisons
KW=kruskal.text(MEAN_Gut_Unweighted ~ University, data=map)
KW=kruskal.test(MEAN_Gut_Unweighted ~ University, data=map)
summary(KW)
fix(KW)
KW
na.omit(map)
d=ggplot(map, aes(x= University, y=MEAN_Gut_Unweighted, color=University, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
rstudio::viewData(map)
map=na.omit(map[,Gender])
map=na.omit(map)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
na.exclude(map)
map2=na.exclude(map)
rstudio::viewData(map2)
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=map, na.exclude(map))
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=map)
map=read.table("DiversitySummaryGutAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.rm=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
stat_sum_single <- function(fun, geom="crossbar", ...) {
stat_summary(fun.y=fun, colour="black", geom=geom, width = 0.4, ymin=-1000,ymax=-1000, ...)
}
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.rm=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.remove=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=map, na.remove=TRUE)
summary(AOVModel)
comparisons=(TukeyHSD(AOVModel))
comparisons
AOVModel=aov(MEAN_Gut_Unweighted ~ Gender, data=map, na.remove=TRUE)
summary(AOVModel)
comparisons=(TukeyHSD(AOVModel))
comparisons
ttest=t.test(MEAN_Gut_Unweighted ~ Gender, data=map)
ttest=t.test(MEAN_Gut_Unweighted ~ Gender, data=map. na.remove=TRUE)
ttest=t.test(MEAN_Gut_Unweighted ~ Gender, data=map, na.remove=TRUE)
rstudio::viewData(map)
rstudio::viewData(map)
map=read.table("DiversitySummaryGutAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.remove=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
stat_sum_single <- function(fun, geom="crossbar", ...) {
stat_summary(fun.y=fun, colour="black", geom=geom, width = 0.4, ymin=-1000,ymax=-1000, ...)
}
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.remove=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
d=ggplot(map, aes(x= Gender, y=MEAN_Gut_Unweighted, color=Gender, na.remove=TRUE, ymax=0.4, ymin=0, title = "Gut - Unweighted UniFrac"))
d=d + geom_point(position=position_jitter(w=0.2), size=3, na.remove=TRUE)
d=d + theme_bw()
d=d + ylab("Average Unweighted UniFrac Distance")
d=d + theme(plot.title = element_text(size = rel(2.2)), axis.title.x = element_text(size=rel(1.5)), axis.title.y = element_text(size=rel(1.5)), axis.text = element_text(size=rel(1.2)))
d + stat_sum_single(mean)
ttest=t.test(MEAN_Gut_Unweighted ~ Gender, data=map, na.remove=TRUE)
ttest
wtest=wilcox.test(MEAN_Gut_Unweighted ~ Gender, data=map, na.remove=TRUE)
wtest
mapGUT=read.table("DiversitySummaryGutAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
mapFORE=read.table("DiversitySummaryForeheadAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
mapTON=read.table("DiversitySummaryTongueAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
mapPALM=read.table("DiversitySummaryPalmAlphaBeta.txt", header=TRUE, sep="\t", check.names=FALSE)
ttest=t.test(MEAN_Gut_Unweighted ~ Gender, data=mapGUT, na.remove=TRUE)
ttest
capture.output(ttest, "Gut_UUniFrac_Gender.txt")
capture.output(ttest, file="Gut_UUniFrac_Gender.txt")
ttest=t.test(MEAN_Gut_Weighted ~ Gender, data=mapGUT, na.remove=TRUE)
ttest
capture.output(ttest, file="Gut_WUniFrac_Gender.txt")
setwd("~/Documents/Student_Study/Data/All_Weeks/OTU_picking_December_2012/beta-diversity/Influence of Gender on Variability")
ttest=t.test(MAD_Gut_Weighted ~ Gender, data=mapGUT, na.remove=TRUE)
ttest
capture.output(ttest, file="Gut_WUniFrac_MAD_Gender.txt")
ttest=t.test(MAD_Gut_Unweighted ~ Gender, data=mapGUT, na.remove=TRUE)
capture.output(ttest, file="Gut_UUniFrac_MAD_Gender.txt")
ttest=t.test(MAD_Forehead_Unweighted ~ Gender, data=mapFORE, na.remove=TRUE)
capture.output(ttest, file="Forehead_UUniFrac_MAD_Gender.txt")
ttest=t.test(MEAN_Forehead_Unweighted ~ Gender, data=mapFORE, na.remove=TRUE)
capture.output(ttest, file="Forehead_UUniFrac_MEAN_Gender.txt")
ttest=t.test(MEAN_Forehead_Weighted ~ Gender, data=mapFORE, na.remove=TRUE)
capture.output(ttest, file="Forehead_WUniFrac_MEAN_Gender.txt")
ttest=t.test(MAD_Forehead_Weighted ~ Gender, data=mapFORE, na.remove=TRUE)
capture.output(ttest, file="Forehead_WUniFrac_MAD_Gender.txt")
ttest=t.test(MAD_Tongue_Weighted ~ Gender, data=mapTON, na.remove=TRUE)
capture.output(ttest, file="Tongue_WUniFrac_MAD_Gender.txt")
ttest=t.test(MEAN_Tongue_Weighted ~ Gender, data=mapTON, na.remove=TRUE)
capture.output(ttest, file="Tongue_WUniFrac_MEAN_Gender.txt")
ttest=t.test(MEAN_Tongue_Unweighted ~ Gender, data=mapTON, na.remove=TRUE)
capture.output(ttest, file="Tongue_UUniFrac_MEAN_Gender.txt")
ttest=t.test(MAD_Tongue_Unweighted ~ Gender, data=mapTON, na.remove=TRUE)
capture.output(ttest, file="Tongue_UUniFrac_MAD_Gender.txt")
ttest=t.test(MAD_Palm_Unweighted ~ Gender, data=mapPalm, na.remove=TRUE)
ttest=t.test(MAD_Palm_Unweighted ~ Gender, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_UUniFrac_MAD_Gender.txt")
ttest=t.test(MEAN_Palm_Unweighted ~ Gender, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_UUniFrac_MEAN_Gender.txt")
ttest=t.test(MEAN_Palm_Weighted ~ Gender, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_WUniFrac_MEAN_Gender.txt")
ttest=t.test(MAD_Palm_Weighted ~ Gender, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_WUniFrac_MAD_Gender.txt")
setwd("~/Documents/Student_Study/Data/All_Weeks/OTU_picking_December_2012/beta-diversity/Influence of University on Variability")
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=mapGUT, na.remove=TRUE)
capture.output(AOVModel, file="GutUUniFrac_MEAN_University.txt")
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=mapGUT, na.remove=TRUE)
Anova=summary(AOVModel)
capture.output(Anova, file="GutUUniFrac_MEAN_University.txt")
comparisons=(TukeyHSD(AOVModel))
comparisons
AOVModel=aov(MEAN_Gut_Unweighted ~ University, data=mapGUT, na.remove=TRUE)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_UUniFrac_MEAN_University.txt")
Anova
AOVModel=aov(MAD_Gut_Unweighted ~ University, data=mapGUT, na.remove=TRUE)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_UUniFrac_MAD_University.txt")
AOVModel=aov(MAD_Gut_Unweighted ~ University, data=mapGUT)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_UUniFrac_MAD_University.txt")
AOVModel=aov(MAD_Gut_Weighted ~ University, data=mapGUT)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_WUniFrac_MAD_University.txt")
AOVModel=aov(MEAN_Gut_Weighted ~ University, data=mapGUT)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_WUniFrac_MEAN_University.txt")
AOVModel=aov(MEAN_Forehead_Weighted ~ University, data=mapFORE)
Anova=summary(AOVModel)
capture.output(Anova, file="Forehead_WUniFrac_MEAN_University.txt")
AOVModel=aov(MAD_Forehead_Weighted ~ University, data=mapFORE)
Anova=summary(AOVModel)
capture.output(Anova, file="Forehead_WUniFrac_MAD_University.txt")
AOVModel=aov(MAD_Forehead_Unweighted ~ University, data=mapFORE)
Anova=summary(AOVModel)
capture.output(Anova, file="Forehead_UUniFrac_MAD_University.txt")
AOVModel=aov(MEAN_Forehead_Unweighted ~ University, data=mapFORE)
Anova=summary(AOVModel)
capture.output(Anova, file="Forehead_UUniFrac_MEAN_University.txt")
comparisons=(TukeyHSD(AOVModel))
capture.output(comparisons, file="Tukeys_Forehead_UUniFrac_MEAN_University.txt")
AOVModel=aov(MEAN_Palm_Unweighted ~ University, data=mapPALM)
Anova=summary(AOVModel)
capture.output(Anova, file="Palm_UUniFrac_MEAN_University.txt")
AOVModel=aov(MAD_Palm_Unweighted ~ University, data=mapPALM)
Anova=summary(AOVModel)
capture.output(Anova, file="Palm_UUniFrac_MAD_University.txt")
AOVModel=aov(MAD_Palm_Weighted ~ University, data=mapPALM)
Anova=summary(AOVModel)
capture.output(Anova, file="Palm_WUniFrac_MAD_University.txt")
AOVModel=aov(MEAN_Palm_Weighted ~ University, data=mapPALM)
Anova=summary(AOVModel)
capture.output(Anova, file="Palm_WUniFrac_MEAN_University.txt")
AOVModel=aov(MEAN_Tongue_Weighted ~ University, data=mapTON)
Anova=summary(AOVModel)
capture.output(Anova, file="Tongue_WUniFrac_MEAN_University.txt")
AOVModel=aov(MAD_Tongue_Weighted ~ University, data=mapTON)
Anova=summary(AOVModel)
capture.output(Anova, file="Tongue_WUniFrac_MAD_University.txt")
AOVModel=aov(MAD_Tongue_Unweighted ~ University, data=mapTON)
Anova=summary(AOVModel)
capture.output(Anova, file="Tongue_UUniFrac_MAD_University.txt")
AOVModel=aov(MEAN_Tongue_Unweighted ~ University, data=mapTON)
Anova=summary(AOVModel)
capture.output(Anova, file="Tongue_UUniFrac_MEAN_University.txt")
rstudio::viewData(mapGUT)
AOVModel=aov(MEAN_Gut_Unweighted ~ BMIclass, data=mapGUT, na.remove=TRUE)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_UUniFrac_MEAN_BMIclass.txt")
AOVModel=aov(MEAN_Gut_Weighted ~ BMIclass, data=mapGUT)
Anova=summary(AOVModel)
capture.output(Anova, file="Gut_WUniFrac_MEAN_BMIclass.txt")
AOVModel=aov(MEAN_Palm_Weighted ~ BiteFingernails, data=mapPALM)
Anova=summary(AOVModel)
capture.output(Anova, file="Palm_WUniFrac_MEAN_BiteFN.txt")
ttest=t.test(MEAN_Palm_Weighted ~ BiteFingernails, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_WUniFrac_MEAN_BiteFN2.txt")
ttest=t.test(MEAN_Palm_Unweighted ~ BiteFingernails, data=mapPALM, na.remove=TRUE)
capture.output(ttest, file="Palm_UUniFrac_MEAN_BiteFN.txt")
